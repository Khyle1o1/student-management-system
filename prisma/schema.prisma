// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
}

enum EventType {
  ACADEMIC
  EXTRACURRICULAR
  MEETING
  SEMINAR
  WORKSHOP
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
  OVERDUE
}

enum FeeType {
  ORGANIZATION_FEE
  ACTIVITY_FEE
  REGISTRATION_FEE
  LABORATORY_FEE
  LIBRARY_FEE
  OTHER
}

enum YearLevel {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  FOURTH_YEAR
  GRADUATE
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  // Relation to student if user is a student
  student       Student?
  
  // Admin created events
  createdEvents Event[]
  
  @@map("users")
}

model Student {
  id          String     @id @default(cuid())
  studentId   String     @unique // Student ID number
  userId      String     @unique
  name        String
  email       String     @unique
  yearLevel   YearLevel
  section     String
  course      String
  phoneNumber String?
  address     String?
  enrolledAt  DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendance  Attendance[]
  payments    Payment[]
  
  @@map("students")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        EventType   @default(OTHER)
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
  location    String
  maxCapacity Int?
  semester    String?     // e.g., "Fall 2024", "Spring 2025"
  schoolYear  String?     // e.g., "2024-2025"
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  
  // Relations
  createdBy   String
  creator     User        @relation(fields: [createdBy], references: [id])
  attendance  Attendance[]
  
  @@map("events")
}

model Attendance {
  id         String           @id @default(cuid())
  studentId  String
  eventId    String
  status     AttendanceStatus @default(PRESENT)
  timestamp  DateTime         @default(now())
  notes      String?
  scannedAt  DateTime?        // When QR/barcode was scanned
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  deletedAt  DateTime?
  
  // Relations
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  event      Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, eventId])
  @@map("attendance")
}

model FeeStructure {
  id          String    @id @default(cuid())
  name        String
  type        FeeType
  amount      Float
  description String?
  dueDate     DateTime?
  semester    String?   // e.g., "Fall 2024"
  schoolYear  String    // e.g., "2024-2025"
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  // Relations
  payments    Payment[]
  
  @@map("fee_structures")
}

model Payment {
  id            String        @id @default(cuid())
  studentId     String
  feeId         String
  amount        Float
  status        PaymentStatus @default(UNPAID)
  paymentDate   DateTime?
  paymentMethod String?       // e.g., "Cash", "Bank Transfer", "Credit Card"
  reference     String?       // Payment reference/receipt number
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  
  // Relations
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  fee           FeeStructure  @relation(fields: [feeId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, feeId])
  @@map("payments")
}

model Report {
  id          String    @id @default(cuid())
  title       String
  type        String    // e.g., "attendance", "payments", "students"
  parameters  Json?     // Report parameters as JSON
  generatedAt DateTime  @default(now())
  generatedBy String
  filePath    String?   // Path to generated file (PDF/Excel)
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  
  @@map("reports")
}
