generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  createdEvents Event[]
  student       Student?

  @@map("users")
}

model Student {
  id         String       @id @default(cuid())
  studentId  String       @unique
  userId     String       @unique
  name       String
  email      String       @unique
  yearLevel  YearLevel
  course     String
  college    String @default("Unassigned")
  enrolledAt DateTime     @default(now())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  attendance Attendance[]
  payments   Payment[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Event {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        EventType    @default(OTHER)
  date        DateTime
  startTime   DateTime
  endTime     DateTime?
  location    String
  maxCapacity Int?
  semester    String?
  schoolYear  String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  createdBy   String
  attendance  Attendance[]
  creator     User         @relation(fields: [createdBy], references: [id])

  @@map("events")
}

model Attendance {
  id        String           @id @default(cuid())
  studentId String
  eventId   String
  status    AttendanceStatus @default(PRESENT)
  timestamp DateTime         @default(now())
  notes     String?
  scannedAt DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, eventId])
  @@map("attendance")
}

model FeeStructure {
  id          String    @id @default(cuid())
  name        String
  type        FeeType
  amount      Float
  description String?
  dueDate     DateTime?
  semester    String?
  schoolYear  String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  payments    Payment[]

  @@map("fee_structures")
}

model Payment {
  id            String        @id @default(cuid())
  studentId     String
  feeId         String
  amount        Float
  status        PaymentStatus @default(UNPAID)
  paymentDate   DateTime?
  paymentMethod String?
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  fee           FeeStructure  @relation(fields: [feeId], references: [id], onDelete: Cascade)
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, feeId])
  @@map("payments")
}

model Report {
  id          String    @id @default(cuid())
  title       String
  type        String
  parameters  Json?
  generatedAt DateTime  @default(now())
  generatedBy String
  filePath    String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  @@map("reports")
}

enum Role {
  ADMIN
  STUDENT
}

enum EventType {
  ACADEMIC
  EXTRACURRICULAR
  MEETING
  SEMINAR
  WORKSHOP
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
  OVERDUE
}

enum FeeType {
  ORGANIZATION_FEE
  ACTIVITY_FEE
  REGISTRATION_FEE
  LABORATORY_FEE
  LIBRARY_FEE
  OTHER
}

enum YearLevel {
  YEAR_1
  YEAR_2
  YEAR_3
  YEAR_4
}
